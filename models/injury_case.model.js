module.exports = (sequelize, DataTypes) => {
  const InjuryCase = sequelize.define('InjuryCase', {
    statusCode: { type: DataTypes.STRING, field: 'status_code' },
    epidemicWeek: { type: DataTypes.INTEGER, field: 'epidemic_week' },
    assignEpidemicWeek: { type: DataTypes.INTEGER, field: 'assign_epidemic_week' },
    weekDate: { type: DataTypes.STRING, field: 'week_date' },
    visitDate: { type: DataTypes.STRING, field: 'visit_date' },
    visitTime: { type: DataTypes.STRING, field: 'visit_time' },
    visitDay: { type: DataTypes.STRING, field: 'visit_day' },
    investigationCode: { type: DataTypes.STRING, field: 'investigation_code', unique: true },
    caseName: { type: DataTypes.STRING, field: 'case_name' },
    age: { type: DataTypes.INTEGER, field: 'age' },
    gender: { type: DataTypes.STRING, field: 'gender' },
    nationality: { type: DataTypes.STRING, field: 'nationality' },
    contactNumber: { type: DataTypes.STRING, field: 'contact_number' },
    occupation: { type: DataTypes.STRING, field: 'occupation' },
    language: { type: DataTypes.STRING, field: 'language' },
    caseAddress: { type: DataTypes.TEXT, field: 'case_address' },
    coordinates: { type: DataTypes.TEXT, field: 'coordinates' },
    nationalAddress: { type: DataTypes.TEXT, field: 'national_address' },
    investigationStatus: { type: DataTypes.TEXT, field: 'investigation_status' },
    reasonIfIncomplete: { type: DataTypes.TEXT, field: 'reason_if_incomplete' },
    typeOfHousing: { type: DataTypes.STRING, field: 'type_of_housing' },
    buildingCondition: { type: DataTypes.STRING, field: 'building_condition' },
    individualCount: { type: DataTypes.INTEGER, field: 'individual_count' },
    containerType: { type: DataTypes.STRING, field: 'container_type' },
    stagnantWaterPresence: { type: DataTypes.STRING, field: 'stagnant_water_presence' },
    targetedNeighborhood: { type: DataTypes.STRING, field: 'targeted_neighborhood' },
    targetedBlock: { type: DataTypes.STRING, field: 'targeted_block' },
    breedingSiteDescription: { type: DataTypes.TEXT, field: 'breeding_site_description' },
    controlStatus: { type: DataTypes.TEXT, field: 'control_status' },
    wasteProcessedCount: { type: DataTypes.INTEGER, field: 'waste_processed_count' },
    healthOfficer: { type: DataTypes.STRING, field: 'health_officer' },
    investigatingOfficer: { type: DataTypes.STRING, field: 'investigating_officer' },
    description: { type: DataTypes.TEXT, field: 'description' },
    notes: { type: DataTypes.TEXT, field: 'notes' },
    sectorName: { type: DataTypes.STRING, field: 'sector_name' },
    municipality: { type: DataTypes.STRING, field: 'municipality' },
    district: { type: DataTypes.STRING, field: 'district' },
    assignedBy: { type: DataTypes.STRING, field: 'assigned_by' },
    assignedTo: { type: DataTypes.STRING, field: 'assigned_to' },
    isSent: { type: DataTypes.BOOLEAN, field: 'is_sent', defaultValue: false },
    isSubmitted: { type: DataTypes.BOOLEAN, field: 'is_submitted', defaultValue: false },
    sentAt: { type: DataTypes.STRING, field: 'sent_at' },
    submittedAt: { type: DataTypes.STRING, field: 'submitted_at' },
    isApproved: { type: DataTypes.BOOLEAN, field: 'is_approved', defaultValue: false },
    approvedAt: { type: DataTypes.STRING, field: 'approved_at' },
    isRejected: { type: DataTypes.BOOLEAN, field: 'is_rejected', defaultValue: false },
    rejectedAt: { type: DataTypes.STRING, field: 'rejected_at' },
    isClosed: { type: DataTypes.BOOLEAN, field: 'is_closed', defaultValue: false },
    isDeleted: { type: DataTypes.BOOLEAN, field: 'is_deleted', defaultValue: false },
    createdBy: { type: DataTypes.STRING, field: 'created_by' },
    approvedBy: { type: DataTypes.STRING, field: 'approved_by' },
    rejectedBy: { type: DataTypes.STRING, field: 'rejected_by' },
    nursery: { type: DataTypes.BOOLEAN, field: 'nursery', defaultValue: false },
    abandonedBuilding: { type: DataTypes.BOOLEAN, field: 'abandoned_building', defaultValue: false },
    nearFactory: { type: DataTypes.BOOLEAN, field: 'near_factory', defaultValue: false },

    factoryType: { type: DataTypes.TEXT, field: 'factory_type' },
    factorySubType: { type: DataTypes.TEXT, field: 'factory_sub_type' },
    explorationStatus: { type: DataTypes.TEXT, field: 'exploration_status' },
    reasonNotExplored: { type: DataTypes.TEXT, field: 'reason_not_explored' },
    subReasonNotExplored: { type: DataTypes.TEXT, field: 'sub_reason_not_explored' },
    isBreedingGroundLarval: { type: DataTypes.STRING, field: 'is_breeding_ground_larval' },
    injuredProfession: { type: DataTypes.TEXT, field: 'injured_profession' },
    injuredSubProfession: { type: DataTypes.TEXT, field: 'injured_sub_profession' },
    subTypeOfHousing: { type: DataTypes.STRING, field: 'sub_type_of_housing' },
    focalState: { type: DataTypes.TEXT, field: 'focal_state' },
    stagnantWaterLocateState: { type: DataTypes.STRING, field: 'stagnant_water_locate_state' },
    bDStagnantWaterLocateDes: { type: DataTypes.TEXT, field: 'bd_stagnant_water_locate_des' },
    bDStagnantWaterLocateSubDes: { type: DataTypes.TEXT, field: 'bd_stagnant_water_locate_sub_des' },
    wastewaterContainerSize: { type: DataTypes.TEXT, field: 'wastewater_container_size' },
    riskFactorLocalState: { type: DataTypes.STRING, field: 'risk_factor_local_state' },
    riskFactorLocateDes: { type: DataTypes.TEXT, field: 'risk_factor_locate_des' },
    riskFactorLocateSubDes: { type: DataTypes.TEXT, field: 'risk_factor_locate_sub_des' },
    numberOfContainer: { type: DataTypes.TEXT, field: 'number_of_container' },
    larvalSampleCollectionTool: { type: DataTypes.STRING, field: 'larval_sample_collection_tool' },
    larvalSampleCollectionSubTool: { type: DataTypes.STRING, field: 'larval_sample_collection_sub_tool' },
    numberOfVirgin: { type: DataTypes.STRING, field: 'number_of_virgin' },
    sampleCodeLarva: { type: DataTypes.STRING, field: 'sample_code_larva' },
    isAdultMosquito: { type: DataTypes.STRING, field: 'is_adult_mosquito' },
    adultSampleCollectionTool: { type: DataTypes.STRING, field: 'adult_sample_collection_tool' },
    adultSampleCollectionSubTool: { type: DataTypes.STRING, field: 'adult_sample_collection_sub_tool' },
    adultSampleCode: { type: DataTypes.STRING, field: 'adult_sample_code' },
    combatStatus: { type: DataTypes.TEXT, field: 'combat_status' },
    reasonNotExploring: { type: DataTypes.TEXT, field: 'reason_not_exploring' },
    subReasonNotExploring: { type: DataTypes.TEXT, field: 'sub_reason_not_exploring' },
    larvaControlType: { type: DataTypes.TEXT, field: 'larva_control_type' },
    larvaSubControlType: { type: DataTypes.TEXT, field: 'larva_sub_control_type' },
    adultControlType: { type: DataTypes.TEXT, field: 'adult_control_type' },
    adultSubControlType: { type: DataTypes.TEXT, field: 'adult_sub_control_type' },
    siteBDLarvalStage: { type: DataTypes.STRING, field: 'site_bd_larval_stage' },
    siteBDLarvalStageSubController: { type: DataTypes.STRING, field: 'site_bd_larval_stage_sub_controller' },
    riskFactorWaterAbandoned: { type: DataTypes.STRING, field: 'risk_factor_water_abandoned' },
    locateAdultMosquitoes: { type: DataTypes.STRING, field: 'locate_adult_mosquitoes' },
    locateAdultMosquitoesSubController: { type: DataTypes.STRING, field: 'locate_adult_mosquitoes_sub_controller' }
  }, {
    tableName: 'injury_cases',
    timestamps: true,
    createdAt: 'created_at',
    updatedAt: 'updated_at',
  });

  return InjuryCase;
};
